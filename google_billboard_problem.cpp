// 1. precomputed string of 1000 digits of e
// 2. large unsigned integer: to store 10 digit integer
// 3. efficient isPrime function
// 4. iterate through e: checking 10 digit chunks
// 5. convert string slice to unsigned long long (stoull)
// 6. continue until prime is found

#include <iostream>
#include <vector>
#include <string>
using namespace std;

string e = "27182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354";
unsigned long long int solution;

bool isPrime(unsigned long long int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;

    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

int main() {
    for (int i=0; i<e.size(); ++i) {
        solution = stoull(e.substr(i,10));

        if (isPrime(solution)) {break;}
    }

    cout << "Found 10 digit consecutive prime of e.";
    cout << endl << solution << ".com";
}